type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | PARALLEL
  | LOCAL
  | EOF
  | COLON
  | TBOOL
  | TINT
  | ARROW

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 46 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
  281 (* LET *);
  282 (* IN *);
  283 (* END *);
  284 (* BACKSLASH *);
  285 (* DOT *);
  286 (* DEF *);
  287 (* SEMICOLON *);
  288 (* PARALLEL *);
  289 (* LOCAL *);
    0 (* EOF *);
  290 (* COLON *);
  291 (* TBOOL *);
  292 (* TINT *);
  293 (* ARROW *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\001\000\003\000\004\000\004\000\007\000\007\000\008\000\
\008\000\008\000\009\000\009\000\011\000\011\000\012\000\012\000\
\012\000\012\000\012\000\012\000\013\000\013\000\013\000\014\000\
\014\000\014\000\014\000\015\000\015\000\015\000\016\000\016\000\
\016\000\017\000\017\000\018\000\018\000\020\000\019\000\019\000\
\021\000\021\000\021\000\010\000\005\000\005\000\005\000\022\000\
\023\000\025\000\025\000\025\000\026\000\026\000\026\000\024\000\
\024\000\024\000\024\000\006\000\006\000\027\000\027\000\027\000\
\027\000\028\000\029\000\029\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\001\000\006\000\001\000\003\000\
\001\000\001\000\003\000\001\000\002\000\001\000\004\000\004\000\
\003\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\003\000\001\000\002\000\002\000\001\000\007\000\007\000\
\001\000\002\000\001\000\003\000\003\000\002\000\001\000\003\000\
\001\000\001\000\001\000\005\000\001\000\001\000\001\000\002\000\
\002\000\003\000\002\000\002\000\003\000\002\000\002\000\006\000\
\004\000\005\000\003\000\001\000\003\000\001\000\001\000\001\000\
\003\000\002\000\004\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\042\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\010\000\012\000\
\000\000\000\000\000\000\027\000\030\000\033\000\035\000\039\000\
\000\000\063\000\062\000\071\000\000\000\060\000\064\000\000\000\
\000\000\000\000\000\000\002\000\055\000\052\000\051\000\054\000\
\000\000\000\000\028\000\029\000\013\000\000\000\034\000\000\000\
\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\066\000\059\000\000\000\000\000\000\000\
\050\000\053\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\025\000\024\000\000\000\065\000\061\000\000\000\
\057\000\000\000\000\000\000\000\037\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\038\000\
\000\000\000\000\044\000\000\000\056\000\000\000\000\000\000\000\
\032\000\031\000"

let yydgoto = "\004\000\
\008\000\026\000\044\000\027\000\009\000\045\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\063\000\039\000\118\000\040\000\010\000\011\000\012\000\
\013\000\014\000\046\000\047\000\048\000"

let yysindex = "\087\000\
\029\255\020\255\014\255\000\000\029\255\013\255\029\255\000\000\
\033\000\032\255\041\255\074\255\029\255\029\255\000\000\000\000\
\000\000\143\255\143\255\052\255\020\255\020\255\062\255\029\255\
\083\255\000\000\091\000\020\255\094\255\107\255\000\000\000\000\
\085\255\102\255\084\255\000\000\000\000\000\000\000\000\000\000\
\014\255\000\000\000\000\000\000\001\000\000\000\000\000\009\255\
\113\255\242\254\071\255\000\000\000\000\000\000\000\000\000\000\
\098\255\100\255\000\000\000\000\000\000\011\255\000\000\117\255\
\138\255\123\255\116\255\000\000\000\000\052\255\052\255\143\255\
\111\255\119\255\143\255\143\255\143\255\143\255\143\255\255\254\
\000\000\014\255\014\255\000\000\000\000\020\255\014\255\029\255\
\000\000\000\000\000\000\020\255\020\255\128\255\020\255\014\255\
\107\255\000\000\102\255\143\255\102\255\143\255\102\255\084\255\
\084\255\000\000\000\000\000\000\014\255\000\000\000\000\115\255\
\000\000\005\255\126\255\012\255\000\000\000\000\133\255\154\255\
\130\255\003\255\102\255\102\255\115\255\020\255\000\000\000\000\
\020\255\141\255\000\000\079\255\000\000\142\255\139\255\094\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\000\036\001\068\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\195\001\143\001\079\001\000\000\000\000\
\047\001\102\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\205\001\207\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\001\000\000\134\000\000\000\166\000\000\000\198\000\038\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\043\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\230\000\011\001\069\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\001\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\238\255\004\000\220\255\000\000\029\000\
\095\000\000\000\248\255\000\000\197\255\042\000\244\255\034\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\113\000\
\000\000\000\000\088\000\000\000\000\000"

let yytablesize = 750
let yytable = "\086\000\
\081\000\023\000\062\000\064\000\080\000\059\000\060\000\109\000\
\049\000\069\000\051\000\061\000\099\000\101\000\103\000\050\000\
\110\000\083\000\126\000\087\000\015\000\016\000\017\000\018\000\
\019\000\020\000\084\000\066\000\091\000\128\000\041\000\132\000\
\052\000\092\000\092\000\082\000\021\000\022\000\022\000\082\000\
\123\000\082\000\124\000\023\000\024\000\005\000\112\000\025\000\
\042\000\043\000\114\000\068\000\015\000\016\000\017\000\018\000\
\019\000\020\000\006\000\122\000\068\000\007\000\098\000\053\000\
\106\000\107\000\108\000\113\000\021\000\021\000\022\000\054\000\
\125\000\116\000\119\000\023\000\121\000\067\000\065\000\015\000\
\016\000\017\000\018\000\019\000\020\000\067\000\067\000\001\000\
\002\000\003\000\068\000\115\000\077\000\078\000\079\000\021\000\
\088\000\022\000\072\000\073\000\074\000\020\000\023\000\024\000\
\055\000\056\000\070\000\133\000\075\000\076\000\134\000\015\000\
\016\000\017\000\018\000\019\000\104\000\105\000\071\000\015\000\
\016\000\017\000\018\000\019\000\100\000\057\000\058\000\021\000\
\089\000\022\000\085\000\090\000\102\000\019\000\023\000\021\000\
\093\000\022\000\094\000\015\000\016\000\017\000\023\000\015\000\
\016\000\017\000\018\000\019\000\095\000\096\000\120\000\082\000\
\127\000\129\000\130\000\021\000\131\000\022\000\135\000\021\000\
\136\000\022\000\023\000\137\000\097\000\017\000\023\000\117\000\
\138\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\015\000\000\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
\023\000\023\000\000\000\046\000\000\000\082\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\014\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\047\000\022\000\022\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\009\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\000\000\021\000\021\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\008\000\000\000\
\000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\000\000\000\000\020\000\020\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\000\000\007\000\000\000\
\000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\000\000\019\000\019\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\000\000\006\000\000\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\005\000\000\000\017\000\017\000\018\000\018\000\
\018\000\018\000\018\000\018\000\048\000\000\000\049\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\000\000\018\000\018\000\016\000\016\000\
\016\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\000\000\016\000\016\000\000\000\000\000\
\000\000\045\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\045\000\045\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\000\000\015\000\015\000\000\000\000\000\000\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\046\000\000\000\000\000\
\000\000\000\000\014\000\014\000\000\000\046\000\046\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\000\000\000\000\014\000\014\000\009\000\
\009\000\009\000\009\000\009\000\009\000\047\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\047\000\047\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\000\000\009\000\009\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\000\000\000\000\008\000\008\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\000\000\007\000\007\000\006\000\
\006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\000\000\000\000\006\000\006\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\005\000\005\000\
\005\000\005\000\000\000\000\000\005\000\005\000\048\000\000\000\
\049\000\005\000\005\000\000\000\000\000\000\000\048\000\048\000\
\049\000\049\000\000\000\000\000\048\000\049\000"

let yycheck = "\014\001\
\000\000\000\000\021\000\022\000\041\000\018\000\019\000\009\001\
\005\000\028\000\007\000\020\000\072\000\073\000\074\000\003\001\
\018\001\009\001\014\001\034\001\001\001\002\001\003\001\004\001\
\005\001\006\001\018\001\024\000\018\001\018\001\017\001\029\001\
\000\000\023\001\023\001\037\001\017\001\000\000\019\001\037\001\
\100\000\037\001\102\000\024\001\025\001\017\001\083\000\028\001\
\035\001\036\001\087\000\009\001\001\001\002\001\003\001\004\001\
\005\001\006\001\030\001\096\000\018\001\033\001\071\000\032\001\
\077\000\078\000\079\000\086\000\017\001\000\000\019\001\031\001\
\109\000\092\000\093\000\024\001\095\000\009\001\017\001\001\001\
\002\001\003\001\004\001\005\001\006\001\003\001\018\001\001\000\
\002\000\003\000\000\000\088\000\009\001\010\001\011\001\017\001\
\026\001\019\001\014\001\015\001\016\001\000\000\024\001\025\001\
\031\001\032\001\013\001\126\000\007\001\008\001\129\000\001\001\
\002\001\003\001\004\001\005\001\075\000\076\000\012\001\001\001\
\002\001\003\001\004\001\005\001\014\001\013\000\014\000\017\001\
\031\001\019\001\018\001\032\001\014\001\000\000\024\001\017\001\
\020\001\019\001\001\001\001\001\002\001\003\001\024\001\001\001\
\002\001\003\001\004\001\005\001\026\001\034\001\023\001\037\001\
\027\001\021\001\001\001\017\001\027\001\019\001\018\001\017\001\
\132\000\019\001\024\001\022\001\070\000\000\000\024\001\092\000\
\135\000\082\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\000\000\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\000\000\255\255\037\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\000\000\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\000\000\255\255\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\000\000\255\255\000\000\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\018\001\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\026\001\027\001\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\018\001\255\255\255\255\
\255\255\255\255\012\001\013\001\255\255\026\001\027\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\002\001\003\001\004\001\005\001\006\001\018\001\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\026\001\027\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\018\001\255\255\
\018\001\031\001\032\001\255\255\255\255\255\255\026\001\027\001\
\026\001\027\001\255\255\255\255\032\001\031\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  PARALLEL\000\
  LOCAL\000\
  EOF\000\
  COLON\000\
  TBOOL\000\
  TINT\000\
  ARROW\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 30 "a3.mly"
                 (_1)
# 429 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'definition) in
    Obj.repr(
# 33 "a3.mly"
                 (_1)
# 436 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mytype) in
    Obj.repr(
# 35 "a3.mly"
             (_1)
# 443 "a3.ml"
               : A1.exptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 38 "a3.mly"
                          (FunctionCall(_1,_2))
# 451 "a3.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression2) in
    Obj.repr(
# 39 "a3.mly"
               (_1)
# 458 "a3.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'mytype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 42 "a3.mly"
                                             (FunctionAbstraction((_2,_4),_6))
# 467 "a3.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 43 "a3.mly"
               (_1)
# 474 "a3.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 46 "a3.mly"
                                   (Disjunction (_1,_3))
# 482 "a3.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conj_expression) in
    Obj.repr(
# 47 "a3.mly"
                    (_1)
# 489 "a3.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_exp) in
    Obj.repr(
# 48 "a3.mly"
            (_1)
# 496 "a3.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conj_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not) in
    Obj.repr(
# 51 "a3.mly"
                           (Conjunction (_1,_3))
# 504 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not) in
    Obj.repr(
# 52 "a3.mly"
        (_1)
# 511 "a3.ml"
               : 'conj_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not) in
    Obj.repr(
# 55 "a3.mly"
          (Not(_2))
# 518 "a3.ml"
               : 'not))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare) in
    Obj.repr(
# 56 "a3.mly"
           (_1)
# 525 "a3.ml"
               : 'not))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 59 "a3.mly"
                       (LessTE(_1,_4))
# 533 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 60 "a3.mly"
                        (GreaterTE(_1,_4))
# 541 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 61 "a3.mly"
                     (GreaterT(_1,_3))
# 549 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 62 "a3.mly"
                     (LessT(_1,_3))
# 557 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 63 "a3.mly"
                     (Equals(_1,_3))
# 565 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'addsub) in
    Obj.repr(
# 64 "a3.mly"
          (_1)
# 572 "a3.ml"
               : 'compare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'addsub) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'divmultrem) in
    Obj.repr(
# 67 "a3.mly"
                          (Sub (_1,_3))
# 580 "a3.ml"
               : 'addsub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'addsub) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'divmultrem) in
    Obj.repr(
# 68 "a3.mly"
                          (Add(_1,_3))
# 588 "a3.ml"
               : 'addsub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'divmultrem) in
    Obj.repr(
# 69 "a3.mly"
              (_1)
# 595 "a3.ml"
               : 'addsub))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'divmultrem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 72 "a3.mly"
                          (Rem(_1,_3))
# 603 "a3.ml"
               : 'divmultrem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'divmultrem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 73 "a3.mly"
                           (Div(_1,_3))
# 611 "a3.ml"
               : 'divmultrem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'divmultrem) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 74 "a3.mly"
                             (Mult(_1,_3))
# 619 "a3.ml"
               : 'divmultrem))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 75 "a3.mly"
            (_1)
# 626 "a3.ml"
               : 'divmultrem))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 78 "a3.mly"
               (Abs(_2))
# 633 "a3.ml"
               : 'absolute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'absolute) in
    Obj.repr(
# 79 "a3.mly"
                  (Negative (_2))
# 640 "a3.ml"
               : 'absolute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'project) in
    Obj.repr(
# 80 "a3.mly"
            (_1)
# 647 "a3.ml"
               : 'absolute))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'project) in
    Obj.repr(
# 88 "a3.mly"
                                    (Project ((_3,_5),_7))
# 656 "a3.ml"
               : 'project))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 89 "a3.mly"
                                                    (IfThenElse(_2,_4,_6))
# 665 "a3.ml"
               : 'project))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 90 "a3.mly"
         (_1)
# 672 "a3.ml"
               : 'project))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tuple1) in
    Obj.repr(
# 94 "a3.mly"
            (Tuple (List.length _2,_2))
# 679 "a3.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren) in
    Obj.repr(
# 95 "a3.mly"
         (_1)
# 686 "a3.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple0) in
    Obj.repr(
# 98 "a3.mly"
                          (_1::_3)
# 694 "a3.ml"
               : 'tuple1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple1) in
    Obj.repr(
# 99 "a3.mly"
                           (_1::_3)
# 702 "a3.ml"
               : 'tuple1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 102 "a3.mly"
                ([_1])
# 709 "a3.ml"
               : 'tuple0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 105 "a3.mly"
           (_1)
# 716 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 106 "a3.mly"
                    (InParen (_2))
# 723 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "a3.mly"
     (Var (_1))
# 730 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 110 "a3.mly"
        (B (_1))
# 737 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 111 "a3.mly"
       (N (_1))
# 744 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 116 "a3.mly"
                                   (Let(_2,_4))
# 752 "a3.ml"
               : 'let_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_definition) in
    Obj.repr(
# 120 "a3.mly"
                   (_1)
# 759 "a3.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'par_definition) in
    Obj.repr(
# 121 "a3.mly"
                   (_1)
# 766 "a3.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sim_definition) in
    Obj.repr(
# 122 "a3.mly"
                    (_1)
# 773 "a3.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seqi_definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sim_definition) in
    Obj.repr(
# 125 "a3.mly"
                                 (Sequence(_1 @ [_2]))
# 781 "a3.ml"
               : 'seq_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pari_definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sim_definition) in
    Obj.repr(
# 128 "a3.mly"
                                 (Parallel(_1 @ [_2]))
# 789 "a3.ml"
               : 'par_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seqi_definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sim_definition) in
    Obj.repr(
# 131 "a3.mly"
                                             (_1 @ [_2])
# 797 "a3.ml"
               : 'seqi_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sim_definition) in
    Obj.repr(
# 132 "a3.mly"
                             ([_1])
# 804 "a3.ml"
               : 'seqi_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'par_definition) in
    Obj.repr(
# 133 "a3.mly"
                             ([_1])
# 811 "a3.ml"
               : 'seqi_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pari_definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sim_definition) in
    Obj.repr(
# 136 "a3.mly"
                                             (_1 @ [_2])
# 819 "a3.ml"
               : 'pari_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sim_definition) in
    Obj.repr(
# 137 "a3.mly"
                            ([_1])
# 826 "a3.ml"
               : 'pari_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_definition) in
    Obj.repr(
# 138 "a3.mly"
                            ([_1])
# 833 "a3.ml"
               : 'pari_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'mytype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 141 "a3.mly"
                                      (Simple((_2,_4),_6))
# 842 "a3.ml"
               : 'sim_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 142 "a3.mly"
                        (Simple_untyped (_2,_4))
# 850 "a3.ml"
               : 'sim_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'definition) in
    Obj.repr(
# 143 "a3.mly"
                                      (Local (_2,_4))
# 858 "a3.ml"
               : 'sim_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'definition) in
    Obj.repr(
# 144 "a3.mly"
                    (_2)
# 865 "a3.ml"
               : 'sim_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_terminal) in
    Obj.repr(
# 148 "a3.mly"
                 (_1)
# 872 "a3.ml"
               : 'mytype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mytype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_terminal) in
    Obj.repr(
# 149 "a3.mly"
                              (Tfunc(_1,_3))
# 880 "a3.ml"
               : 'mytype))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "a3.mly"
       (Tint)
# 886 "a3.ml"
               : 'type_terminal))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "a3.mly"
         (Tbool)
# 892 "a3.ml"
               : 'type_terminal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typel) in
    Obj.repr(
# 154 "a3.mly"
         (_1)
# 899 "a3.ml"
               : 'type_terminal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mytype) in
    Obj.repr(
# 155 "a3.mly"
                (_2)
# 906 "a3.ml"
               : 'type_terminal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typel_1) in
    Obj.repr(
# 158 "a3.mly"
              (Ttuple(_1))
# 913 "a3.ml"
               : 'typel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mytype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mytype) in
    Obj.repr(
# 161 "a3.mly"
                          ([_2;_4])
# 921 "a3.ml"
               : 'typel_1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typel_1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mytype) in
    Obj.repr(
# 162 "a3.mly"
                        (_1 @ [_3])
# 929 "a3.ml"
               : 'typel_1))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry type_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
let type_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : A1.exptype)
